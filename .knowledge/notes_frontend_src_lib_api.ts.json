{"is_source_file": true, "format": "TypeScript", "description": "This file provides an API client in TypeScript that wraps HTTP fetch calls with authentication tokens and base URL management. It includes functions for user authentication, note management, folder management, and tag management, exposing a public interface for interacting with the backend API.", "external_files": ["@builder.io/qwik", "import.meta.env"], "external_methods": ["isServer", "localStorage.getItem", "fetch", "URLSearchParams", "JSON.stringify"], "published": ["apiLogin", "apiRegister", "apiGetMe", "apiListNotes", "apiCreateNote", "apiUpdateNote", "apiDeleteNote", "apiListFolders", "apiCreateFolder", "apiListTags"], "classes": [], "methods": [{"name": "async function request<T>(path: string, options: RequestInit = {}): Promise<T> { request", "description": "A generic function to perform HTTP requests with optional authentication token and handle responses, including error handling.", "scope": "", "scopeKind": ""}, {"name": "export async function apiLogin(email: string, password: string): Promise<{ token: string; user: / apiLogin", "description": "Authenticates a user with email and password, returning a token and user info.", "scope": "", "scopeKind": ""}, {"name": "export async function apiRegister(email: string, password: string): Promise<{ token: string; use/ apiRegister", "description": "Registers a new user with email and password, returning a token and user info.", "scope": "", "scopeKind": ""}, {"name": "export async function apiGetMe(): Promise<{ id: string; email: string }> { apiGetMe", "description": "Retrieves the current authenticated user's profile information.", "scope": "", "scopeKind": ""}, {"name": "export async function apiListNotes(params?: { q?: string; tag?: string; folderId?: string }): Pr/ apiListNotes", "description": "Retrieves a list of notes with optional search parameters.", "scope": "", "scopeKind": ""}, {"name": "export async function apiCreateNote(payload: Partial<Note>): Promise<Note> { apiCreateNote", "description": "Creates a new note with provided payload.", "scope": "", "scopeKind": ""}, {"name": "export async function apiUpdateNote(id: string, payload: Partial<Note>): Promise<Note> { apiUpdateNote", "description": "Updates an existing note identified by ID with new data.", "scope": "", "scopeKind": ""}, {"name": "export async function apiDeleteNote(id: string): Promise<void> { apiDeleteNote", "description": "Deletes a note by its ID.", "scope": "", "scopeKind": ""}, {"name": "export async function apiListFolders(): Promise<Folder[]> { apiListFolders", "description": "Retrieves a list of user folders.", "scope": "", "scopeKind": ""}, {"name": "export async function apiCreateFolder(name: string): Promise<Folder> { apiCreateFolder", "description": "Creates a new folder with the specified name.", "scope": "", "scopeKind": ""}, {"name": "export async function apiListTags(): Promise<Tag[]> { apiListTags", "description": "Retrieves a list of user tags.", "scope": "", "scopeKind": ""}, {"name": "function getToken() { getToken", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["fetch", "JSON.stringify", "request"], "search-terms": ["api client", "notes API", "authentication", "folder management", "tag management", "TypeScript API"], "state": 2, "file_id": 18, "knowledge_revision": 38, "git_revision": "", "ctags": [{"_type": "tag", "name": "API_BASE", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^const API_BASE = import.meta.env.VITE_API_BASE_URL || \"\\/api\";$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "Folder", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^export type Folder = { id: string; name: string; count?: number };$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "Note", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^export type Note = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "Tag", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^export type Tag = { id: string; name: string; count?: number };$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "apiCreateFolder", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^export async function apiCreateFolder(name: string): Promise<Folder> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "apiCreateNote", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^export async function apiCreateNote(payload: Partial<Note>): Promise<Note> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "apiDeleteNote", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^export async function apiDeleteNote(id: string): Promise<void> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "apiGetMe", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^export async function apiGetMe(): Promise<{ id: string; email: string }> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "apiListFolders", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^export async function apiListFolders(): Promise<Folder[]> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "apiListNotes", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^export async function apiListNotes(params?: { q?: string; tag?: string; folderId?: string }): Pr/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "apiListTags", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^export async function apiListTags(): Promise<Tag[]> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "apiLogin", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^export async function apiLogin(email: string, password: string): Promise<{ token: string; user: /", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "apiRegister", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^export async function apiRegister(email: string, password: string): Promise<{ token: string; use/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "apiUpdateNote", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^export async function apiUpdateNote(id: string, payload: Partial<Note>): Promise<Note> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "getToken", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^function getToken() {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "headers", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^  const headers: HeadersInit = {$/", "language": "TypeScript", "kind": "constant", "scope": "request", "scopeKind": "function"}, {"_type": "tag", "name": "qs", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^  const qs = usp.toString();$/", "language": "TypeScript", "kind": "constant", "scope": "apiListNotes", "scopeKind": "function"}, {"_type": "tag", "name": "request", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^async function request<T>(path: string, options: RequestInit = {}): Promise<T> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^  const res = await fetch(`${API_BASE}${path}`, {$/", "language": "TypeScript", "kind": "constant", "scope": "request", "scopeKind": "function"}, {"_type": "tag", "name": "text", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^    const text = await res.text().catch(() => \"\");$/", "language": "TypeScript", "kind": "constant", "scope": "request", "scopeKind": "function"}, {"_type": "tag", "name": "token", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^  const token = getToken();$/", "language": "TypeScript", "kind": "constant", "scope": "request", "scopeKind": "function"}, {"_type": "tag", "name": "usp", "path": "/home/kavia/workspace/code-generation/note-organizer-14314-14374/notes_frontend/src/lib/api.ts", "pattern": "/^  const usp = new URLSearchParams();$/", "language": "TypeScript", "kind": "constant", "scope": "apiListNotes", "scopeKind": "function"}], "hash": "2de0ad83f8d531e81f249c77c0a425a9", "format-version": 4, "code-base-name": "notes_frontend", "filename": "notes_frontend/src/lib/api.ts", "revision_history": [{"38": ""}]}